basePath: /
definitions:
  category.Category:
    properties:
      category_description:
        type: string
      category_title:
        type: string
      id:
        type: integer
      img_url:
        type: string
    required:
    - category_title
    type: object
  category.Filtration:
    properties:
      categoryId:
        type: integer
      filtrationDescription:
        type: string
      filtrationListId:
        type: integer
      filtrationTitle:
        type: string
      id:
        type: integer
      imgUrl:
        type: string
      infoDescription:
        type: string
    required:
    - filtrationTitle
    - infoDescription
    type: object
  handler.CartProductsResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/shopping.CartProductFullInfo'
        type: array
      sum:
        type: number
    type: object
  handler.ChangePasswordInput:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  handler.Error:
    properties:
      message:
        type: string
    type: object
  handler.ItemProcessedResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  handler.OrderResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  handler.ProcessedOrderStatus:
    properties:
      orderId:
        type: integer
      toStatus:
        type: string
    required:
    - orderId
    - toStatus
    type: object
  handler.ProductIdInput:
    properties:
      id:
        type: integer
    type: object
  handler.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handler.SignInResponse:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjA5MDI0NzAsImlhdCI6MTY2MDg5NTI3MCwidXNlcl9pZCI6MSwidXNlcl9yb2xlX2lkIjozfQ.OTiwDdjjCkYkN7LfyOL6VWF7maKvuIpXWH2XWKFzZEo
        type: string
      sessionId:
        example: 15
        type: integer
      userId:
        example: 5
        type: integer
      userRoleId:
        example: 1
        type: integer
    type: object
  handler.allCategoriesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/category.Category'
        type: array
    type: object
  inventory.CurrentProductDTO:
    properties:
      currentAmount:
        type: number
      currentSpend:
        type: number
      currentSupply:
        type: number
      currentWriteOff:
        type: number
      initialAmount:
        type: number
      lastInventory:
        type: string
      lastInventoryId:
        type: integer
      productId:
        type: integer
      productPrice:
        type: number
      title:
        type: string
      writeOffPrice:
        type: number
    type: object
  inventory.InsertProductDTO:
    properties:
      initialAmount:
        description: amount from the last inventory
        type: number
      lastInventoryId:
        type: integer
      plannedAmount:
        description: current amount in stock
        type: number
      productId:
        type: integer
      productPrice:
        type: number
      realAmount:
        description: inventory input
        type: number
      spends:
        description: spending (customers orders) from the last inventory
        type: number
      supply:
        description: from the last inventory
        type: number
      writeOff:
        description: something that wasn't sold
        type: number
    required:
    - plannedAmount
    - productId
    - productPrice
    - realAmount
    type: object
  inventory.SelectProductDTO:
    properties:
      difference:
        type: number
      differencePrice:
        type: number
      initialAmount:
        description: amount from the last inventory
        type: number
      lastInventoryId:
        type: integer
      plannedAmount:
        description: current amount in stock
        type: number
      productId:
        type: integer
      productPrice:
        type: number
      productTitle:
        type: string
      realAmount:
        description: inventory input
        type: number
      realAmountPrice:
        description: inventory input price
        type: number
      spends:
        description: spending (customers orders) from the last inventory
        type: number
      supply:
        description: from the last inventory
        type: number
      writeOff:
        description: something that wasn't sold
        type: number
      writeOffPrice:
        description: something that wasn't sold price
        type: number
    required:
    - plannedAmount
    - productId
    - productPrice
    - productTitle
    - realAmount
    - spends
    - supply
    - writeOff
    - writeOffPrice
    type: object
  order.CreateDTO:
    properties:
      delivery:
        items:
          $ref: '#/definitions/order.OrdersDelivery'
        type: array
      order:
        $ref: '#/definitions/order.Order'
      products:
        items:
          $ref: '#/definitions/order.Product'
        type: array
    type: object
  order.Order:
    properties:
      closed_at:
        type: string
      comment:
        type: string
      created_at:
        type: string
      delivery_type_title:
        type: string
      id:
        type: integer
      payment_type_title:
        type: string
      status:
        type: string
      sum_price:
        type: number
      user_email:
        type: string
      user_firstname:
        type: string
      user_id:
        type: integer
      user_lastname:
        type: string
      user_middle_name:
        type: string
      user_phone_number:
        type: string
    required:
    - delivery_type_title
    - payment_type_title
    - sum_price
    - user_email
    - user_firstname
    - user_lastname
    - user_middle_name
    - user_phone_number
    type: object
  order.OrdersDelivery:
    properties:
      delivery_description:
        type: string
      delivery_title:
        type: string
    type: object
  order.Product:
    properties:
      price_for_quantity:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  order.ProductFullInfo:
    properties:
      amount_in_stock:
        type: number
      article:
        type: string
      created_at:
        type: string
      id:
        type: integer
      img_url:
        type: string
      order_id:
        type: integer
      packaging:
        items:
          type: integer
        type: array
      price:
        type: number
      price_for_quantity:
        type: number
      product_title:
        type: string
      quantity:
        type: integer
    type: object
  order.SelectDTO:
    properties:
      delivery:
        items:
          $ref: '#/definitions/order.OrdersDelivery'
        type: array
      info:
        $ref: '#/definitions/order.Order'
      products:
        items:
          $ref: '#/definitions/order.ProductFullInfo'
        type: array
    type: object
  product.Product:
    properties:
      amount_in_stock:
        example: 120
        type: number
      article:
        example: "000123"
        type: string
      category_title:
        example: Одноразові стакани
        type: string
      characteristics:
        items:
          type: integer
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        example: 5
        type: integer
      img_url:
        example: https://google-images.com/some-img123
        type: string
      packaging:
        items:
          type: integer
        type: array
      price:
        example: 3.75
        type: number
      product_title:
        example: Стакан одноразовий Крафт 110мл
        type: string
      type_title:
        example: Стакан
        type: string
    required:
    - article
    - category_title
    - price
    - product_title
    - type_title
    type: object
  review.CreateReviewDTO:
    properties:
      mark:
        type: integer
      reviewText:
        type: string
      userId:
        type: integer
      userName:
        type: string
    required:
    - mark
    - reviewText
    - userName
    type: object
  review.SelectReviewsDTO:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      mark:
        type: integer
      reviewText:
        type: string
      userId:
        type: integer
      userName:
        type: string
    type: object
  shopping.CartProduct:
    properties:
      price_for_quantity:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
    required:
    - price_for_quantity
    - product_id
    - quantity
    type: object
  shopping.CartProductFullInfo:
    properties:
      amount_in_stock:
        example: 120
        type: number
      article:
        example: "000123"
        type: string
      created_at:
        type: string
      img_url:
        example: https://google-images.com/some-img123
        type: string
      packaging:
        items:
          type: integer
        type: array
      price:
        example: 3.75
        type: number
      price_for_quantity:
        type: number
      product_id:
        type: integer
      product_title:
        example: Стакан одноразовий Крафт 110мл
        type: string
      quantity:
        type: integer
    required:
    - price_for_quantity
    - product_id
    - quantity
    type: object
  shopping.DeliveryPaymentTypes:
    properties:
      deliveryTypes:
        items:
          $ref: '#/definitions/shopping.DeliveryType'
        type: array
      paymentTypes:
        items:
          $ref: '#/definitions/shopping.PaymentType'
        type: array
    type: object
  shopping.DeliveryType:
    properties:
      delivery_type_title:
        type: string
      id:
        type: string
    type: object
  shopping.PaymentType:
    properties:
      id:
        type: string
      payment_type_title:
        type: string
    type: object
  supply.InfoDTO:
    properties:
      comment:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      sum:
        type: number
      supplier:
        type: string
      supplyTime:
        type: string
    required:
    - supplier
    type: object
  supply.PaymentDTO:
    properties:
      paymentSum:
        type: number
      paymentTime:
        type: string
      paymentType:
        type: string
    required:
    - paymentSum
    - paymentType
    type: object
  supply.ProductDTO:
    properties:
      amount:
        type: number
      packaging:
        type: string
      priceForUnit:
        type: number
      productId:
        type: integer
      productTitle:
        type: string
      sumWithoutTax:
        type: number
      tax:
        type: number
      totalSum:
        type: number
    required:
    - amount
    - priceForUnit
    - productId
    - sumWithoutTax
    - tax
    - totalSum
    type: object
  supply.Supply:
    properties:
      info:
        $ref: '#/definitions/supply.InfoDTO'
      payment:
        items:
          $ref: '#/definitions/supply.PaymentDTO'
        type: array
      products:
        items:
          $ref: '#/definitions/supply.ProductDTO'
        type: array
    type: object
  user.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role_id:
        type: integer
    required:
    - email
    - name
    - password
    - phone_number
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for AllianceCup Application
  title: AllianceCup API
  version: "1.0"
paths:
  /api/admin/category:
    delete:
      consumes:
      - application/json
      description: Deletes category
      operationId: deletes category
      parameters:
      - description: category id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: DeleteCategory
      tags:
      - api/admin
    post:
      consumes:
      - application/json
      description: Adds a new category
      operationId: adds category
      parameters:
      - description: category info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/category.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: AddCategory
      tags:
      - api/admin
    put:
      consumes:
      - application/json
      description: Updates category
      operationId: updates category
      parameters:
      - description: category info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/category.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: UpdateCategory
      tags:
      - api/admin
  /api/admin/filtration:
    post:
      consumes:
      - application/json
      description: Adds a filtration item to a category
      operationId: add filtration
      parameters:
      - description: filtration info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/category.Filtration'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Add filtration for category
      tags:
      - api/admin
  /api/admin/moderator:
    post:
      consumes:
      - application/json
      description: registers a new moderator
      operationId: create account for moderator
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: CreateModerator
      tags:
      - api/admin
  /api/admin/orders:
    get:
      description: get order by status
      operationId: get order
      parameters:
      - description: Last item created at for pagination
        in: query
        name: created_at
        type: string
      - description: Sort by order status
        in: query
        name: order_status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/order.Order'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Orders
      tags:
      - api/admin
  /api/admin/processed-order:
    put:
      consumes:
      - application/json
      description: handler for admin/moderator to processed order by id
      operationId: processed order
      parameters:
      - description: order status
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.ProcessedOrderStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Processed order by id
      tags:
      - api/admin
  /api/admin/product:
    delete:
      consumes:
      - application/json
      operationId: delete product
      parameters:
      - description: product id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: DeleteProduct
      tags:
      - api/admin
    post:
      consumes:
      - application/json
      operationId: adds product
      parameters:
      - description: product info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/product.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: AddProduct
      tags:
      - api/admin
    put:
      consumes:
      - application/json
      operationId: updates product
      parameters:
      - description: product info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/product.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: UpdateProduct
      tags:
      - api/admin
  /api/admin/super/inventories:
    get:
      operationId: gets inventories
      parameters:
      - description: Last inventory created at for pagination
        in: query
        name: createdAt
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/inventory.CurrentProductDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get inventories
      tags:
      - api/admin/super
  /api/admin/super/inventory:
    get:
      operationId: gets products to inventory
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/inventory.CurrentProductDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get products to inventory them
      tags:
      - api/admin/super
    post:
      consumes:
      - application/json
      operationId: do products inventory
      parameters:
      - description: products info to inventory
        in: body
        name: input
        required: true
        schema:
          items:
            $ref: '#/definitions/inventory.InsertProductDTO'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Do products inventory
      tags:
      - api/admin/super
  /api/admin/super/inventory-products:
    get:
      operationId: gets inventory products
      parameters:
      - description: Inventory id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/inventory.SelectProductDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get inventory products
      tags:
      - api/admin/super
  /api/admin/supply:
    delete:
      description: Deletes supply
      operationId: deletes supply
      parameters:
      - description: Supply id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete supply by id
      tags:
      - api/admin
    get:
      description: Get supplies
      operationId: get supplies
      parameters:
      - description: Last item createdAt for pagination
        in: query
        name: createdAt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/supply.InfoDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Supplies
      tags:
      - api/admin
    post:
      consumes:
      - application/json
      description: Creates new supply
      operationId: creates new supply
      parameters:
      - description: Supply info
        in: body
        name: supply
        required: true
        schema:
          $ref: '#/definitions/supply.Supply'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Create new supply
      tags:
      - api/admin
  /api/admin/supply-products:
    get:
      description: Get supply products
      operationId: get supply products
      parameters:
      - description: Supply id
        in: query
        name: id
        required: true
        type: integer
      - description: Last item createdAt for pagination
        in: query
        name: createdAt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/supply.ProductDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Supply Products
      tags:
      - api/admin
  /api/categories:
    get:
      consumes:
      - application/json
      description: get all categories
      operationId: get categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.allCategoriesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: GetCategories
      tags:
      - api
  /api/client/cart:
    delete:
      consumes:
      - application/json
      description: deletes a product from users cart
      operationId: deletes from cart
      parameters:
      - description: Product id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: DeleteFromCart
      tags:
      - api/client
    get:
      description: gets products from a cart
      operationId: gets products from a cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CartProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: GetProductsInCart
      tags:
      - api/client
    post:
      consumes:
      - application/json
      description: adds a product to a cart
      operationId: adds a product to a cart
      parameters:
      - description: product info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/shopping.CartProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: AddToCart
      tags:
      - api/client
  /api/client/change-password:
    put:
      consumes:
      - application/json
      description: Changes user password
      operationId: change user password
      parameters:
      - description: Order to change password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.ChangePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Client change password
      tags:
      - api/client
  /api/client/favourites:
    delete:
      description: deletes product from favourites
      operationId: deletes from favourites
      parameters:
      - description: Product id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.ItemProcessedResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: DeleteFromFavourites
      tags:
      - api/client
    get:
      description: gets user favourite products
      operationId: get favourites
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: GetFavourites
      tags:
      - api/client
    post:
      consumes:
      - application/json
      description: adds a product to favourites
      operationId: adds to favourites
      parameters:
      - description: product id
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.ProductIdInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: AddToFavourites
      tags:
      - api/client
  /api/client/logout:
    delete:
      description: ends session
      operationId: logout from account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - api/client
  /api/client/order:
    get:
      description: gets user order full info by its id
      operationId: gets order by id
      parameters:
      - description: order id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: get order
          schema:
            items:
              $ref: '#/definitions/order.SelectDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: GetOrderById
      tags:
      - api/client
  /api/client/user-order:
    get:
      consumes:
      - application/json
      description: gets user order
      operationId: gets order
      parameters:
      - description: last order created_at for pagination
        in: query
        name: created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/order.SelectDTO'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: GetUserOrders
      tags:
      - api/client
  /api/filtration:
    get:
      consumes:
      - application/json
      description: gets filtration list for a products
      operationId: get filtration
      parameters:
      - description: parent id
        in: query
        name: id
        required: true
        type: integer
      - description: parent name
        in: query
        name: parentName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/category.Filtration'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: GetFiltration
      tags:
      - api
  /api/invoice:
    put:
      description: Get pdf file with order invoice
      operationId: pdf order invoice
      parameters:
      - description: order id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: attachment
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: Get pdf invoice by order id
      tags:
      - api
  /api/order:
    post:
      consumes:
      - application/json
      description: creates a new order
      operationId: creates an order
      parameters:
      - description: order info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/order.CreateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: NewOrder
      tags:
      - api
  /api/order-info-types:
    get:
      description: get payment and delivery types
      operationId: get order info types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/shopping.DeliveryPaymentTypes'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: Get order info types
      tags:
      - api
  /api/product:
    get:
      operationId: gets full product info
      parameters:
      - description: Product id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: GetProductById
      tags:
      - api
  /api/products:
    post:
      operationId: gets products
      parameters:
      - description: Category
        in: query
        name: category
        type: string
      - description: Size
        in: query
        name: size
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Price
        in: query
        name: price
        type: string
      - description: Characteristic
        in: query
        name: characteristic
        type: string
      - description: Created At
        in: query
        name: created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: GetProducts
      tags:
      - api
  /api/review:
    delete:
      description: deletes review by its id
      operationId: delete review
      parameters:
      - description: review id
        in: query
        name: reviewId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      security:
      - ApiKeyAuth: []
      summary: DeleteReview
      tags:
      - api/admin
    post:
      consumes:
      - application/json
      description: creates a new review
      operationId: create review
      parameters:
      - description: review info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/review.CreateReviewDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.ItemProcessedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: AddReview
      tags:
      - api
  /api/reviews:
    get:
      consumes:
      - application/json
      description: gets reviews by product id
      operationId: gets reviews
      parameters:
      - description: product id
        in: query
        name: productId
        type: integer
      - description: last review createdAt
        in: query
        name: createAt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/review.SelectReviewsDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: GetReviews
      tags:
      - api
  /auth/refresh:
    post:
      description: Gets a new access token using refreshToken
      operationId: refreshes token from account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: Refresh
      tags:
      - auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: signs in account
      operationId: sign-in account
      parameters:
      - description: sign in account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: SignIn
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: registers a new user
      operationId: create account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Error'
      summary: SignUp
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
